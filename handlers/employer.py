from telebot import types
from telebot import TeleBot
from datetime import datetime , timedelta
import logging
import data_base as db
from decorations import *
import support
import keyboards
import keyboards.employer
from config import chat_mod , commission_rate

logger = logging.getLogger(__name__)

def emplouer_home_page(bot: TeleBot , user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑—á–∏–∫–∞"""

    employer_data = db.get.employer_data(user_id)

    rating = employer_data['rating_sum']/employer_data['rating_number']
    
    if int(rating) == rating:
        rating = int(rating)
        
    else:
        rating = round(rating, 2)

    message = str(
        f"<b>üè¢ {employer_data['name']}</b>\n\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5\n"
        f"üë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {employer_data['staff_count']}\n"
        f"üìÑ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:</b> {employer_data['jobs_count']}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {employer_data['balance']} ‚ÇΩ\n"
        f"üîë <b>–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> <code>{employer_data['secret_code']}</code>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É!"
    )
    
    bot.send_message(user_id , message , reply_markup=keyboards.employer.home() , parse_mode='HTML')

def register_employer(bot: TeleBot):
    
    
    @bot.message_handler(func=lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
    @employer_only(bot , lambda msg: msg)
    def start_create_job(msg):
        try:
            balance = db.get.user_info(msg.chat.id , 'balance')
            
            if balance < 0:
                bot.send_message(msg.chat.id , '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç—å')
            
            else:
                bot.delete_state(msg.chat.id , msg.chat.id)
                bot.set_state(msg.from_user.id , 'process_create' , msg.chat.id)
                
                message = str(
                    "<b>üìå –®–∞–≥ 1 –∏–∑ 7</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>, –∫–æ—Ç–æ—Ä–æ–µ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É.\n"
                    "–ü—Ä–∏–º–µ—Ä: <i>–†–∞–∑–¥–∞—Ç—á–∏–∫ –ª–∏—Å—Ç–æ–≤–æ–∫</i>\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                    msg.chat.id ,
                    message , 
                    parse_mode= 'HTML' , 
                    reply_markup=types.ReplyKeyboardRemove()
                )
                
                bot.register_next_step_handler(msg , process_title)

        except Exception as e:
            logger.error(f'Error in start_create_job: {e}')


    def process_title(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot , msg.from_user.id)
            
            else:
                bot.add_data(msg.from_user.id , msg.chat.id , title = msg.text)
                
                message = str(
                     "<b>üìå –®–∞–≥ 2 –∏–∑ 7</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
                    "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n"
                    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤ —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ –∞–¥—Ä–µ—Å –∫—É–¥–∞ –Ω–∞–¥–æ –ø—Ä–∏–π—Ç–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode='HTML'
                )
                
                bot.register_next_step_handler(msg ,  process_description)
        
        except Exception as e:
            logger.error(f'Error in process_title: {e}')
                
    
    def process_description(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot , msg.from_user.id)
                
            else:
                bot.add_data(msg.from_user.id , msg.chat.id , description = msg.text)
            
                message = str(
                    "<b>üìå –®–∞–≥ 3 –∏–∑ 7</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>.\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>15.06.2025</code>\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                        msg.chat.id , 
                        message , 
                        parse_mode='HTML'
                )
                
                bot.register_next_step_handler(msg , process_date)
        
        except Exception as e:
            logger.error(f'Error in process_description: {e}')
    
    
    def process_date(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot , msg.from_user.id)
                
            else:
                date = datetime.strptime(msg.text, "%d.%m.%Y").date()
                
                if date < (datetime.now().date() + timedelta(days=1)):
                    bot.send_message(
                        msg.chat.id , 
                        '—É–∫–∞–∑–∞–Ω–∞—è –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é' 
                    )
                    return bot.register_next_step_handler(msg , process_date)
                
                bot.add_data(msg.from_user.id , msg.chat.id , date = msg.text)

                message = str(
                    "<b>üìå –®–∞–≥ 4 –∏–∑ 7</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è</b> —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.\n"
                    "–§–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú‚Äì–ß–ß:–ú–ú</code>\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>10:00‚Äì16:00</code>\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )

                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode='HTML'
                )
                
                bot.register_next_step_handler(msg , process_time)
        
        except Exception as e:
            logger.error(f'Error in process_date: {e}')
    
    def process_time(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot, msg.from_user.id)
            else:
                # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å
                cleaned_text = msg.text.replace('‚Äì', '-').replace('‚Äî', '-').strip()

                time_parts = cleaned_text.split('-')

                if len(time_parts) != 2:
                    bot.send_message(
                        msg.chat.id,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>10:00-16:00</code>",
                        parse_mode='HTML'
                    )
                    bot.register_next_step_handler(msg, process_time)
                    return

                time_start = time_parts[0].strip()
                time_end = time_parts[1].strip()

                bot.add_data(msg.from_user.id, msg.chat.id, time_start=time_start)
                bot.add_data(msg.from_user.id, msg.chat.id, time_end=time_end)
                
                message = str(
                    "<b>üìå –®–∞–≥ 5 –∏–∑ 7</b>\n"
                    "—É–∫–∞–∂–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b> –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –Ω–∞ —ç—Ç—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode='HTML'
                )
                
                bot.register_next_step_handler(msg , process_people)
        
        except Exception as e:
            logger.error(f'Error in process_time: {e}')
    
    
    def process_people(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot , msg.from_user.id)
                
            else:
                try:
                    people = int(msg.text)
                    bot.add_data(msg.from_user.id , msg.chat.id , people = people)
                    
                    message = str(
                        "<b>üìå –®–∞–≥ 6 –∏–∑ 7</b>\n"
                        "–í–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É –æ–ø–ª–∞—Ç—ã</b> –∑–∞ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ä—É–±–ª—è—Ö.\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>1200</code>\n\n"
                        "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                    )
                    
                    bot.send_message(
                        msg.chat.id , 
                        message , 
                        parse_mode='HTML'
                    )
                    
                    bot.register_next_step_handler(msg , process_price)
                except:
                    bot.send_message(msg.chat.id , '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏–∫ —Å–∏–º–≤–∞–ª–æ–≤')
                    bot.register_next_step_handler(msg , process_people)

        except Exception as e:
            logger.error(f'Error in process_people: {e}')
    
    
    def process_price(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot , msg.from_user.id)
                
            else:
                try:
                    price = float(msg.text)
                    bot.add_data(msg.from_user.id , msg.chat.id , price = price)
                    
                    secret_code = db.get.user_info(msg.chat.id , 'secret_code')
                    message = str(
                        "<b>üìå –®–∞–≥ 7 –∏–∑ 7</b>\n"
                        "–ö—Ç–æ –±—É–¥–µ—Ç <b>–æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é</b>?\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n\n"
                        "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                    )
                    
                    bot.send_message(
                        msg.chat.id , 
                        message , 
                        reply_markup=keyboards.employer.staff(secret_code) , 
                        parse_mode='HTML'
                    )
                    
                    bot.register_next_step_handler(msg , process_staff)
                
                except:
                    bot.send_message(msg.chat.id , '–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–∞–ª–æ–≤, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ø–µ–π–∫–∏ –ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É')
        
        except Exception as e:
            logger.error(f'Error in process_price: {e}')
    
    
    def process_staff(msg):
        try:
            if msg.text == '/cancel':
                emplouer_home_page(bot , msg.from_user.id)
                
            else:
                with bot.retrieve_data(msg.from_user.id , msg.chat.id) as data:
                    message = str(
                        "<b>‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
                        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}\n"
                        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {data['time_start']}‚Äì{data['time_end']}\n"
                        f"üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> {data['price']} ‚ÇΩ\n"
                        f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {msg.text}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <i>¬´–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏¬ª</i>."
                    )
                    
                    bot.send_message(
                        msg.chat.id , 
                        message , 
                        reply_markup=types.ReplyKeyboardRemove() , 
                        parse_mode='HTML'
                    )

                    secret_code = db.get.user_info(msg.chat.id , 'secret_code')
                    staff_list = db.get.staff(secret_code)
                    selected_name = msg.text
                    selected_staff = next((s for s in staff_list if s['name'] == selected_name), None)
                    id_staff = selected_staff['user_id']
                    db.add.job(
                        msg.chat.id , 
                        data['title'] ,
                        data['description'] , 
                        data['time_start'] , 
                        data['time_end'] ,
                        data['date'] , 
                        data['price'] ,
                        data['people'] , 
                        id_staff
                    )
        
        except Exception as e:
            logger.error(f'Error in process_price: {e}')
    
    
    
    @bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
    @employer_only(bot , lambda msg: msg)
    def my_job_employer(msg):
        try:
            employer_id = int(msg.from_user.id)
            project_ids = db.get.job_ids_employer(employer_id)
            
            if not project_ids:
                bot.send_message(employer_id , "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
                return
            
            support.employer.show_job(bot , msg.chat.id , project_ids[0] , 0 , msg.message_id)
            
        except Exception as e:
            logger.error(f'Error in my_job_employer: {e}')
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith(('employer_project_prev_' , 'employer_project_next_')) or call.data in (('employer_project_boundary_first', 'employer_project_boundary_last')))
    @employer_only(bot , lambda msg: msg)
    def navigation_employer_job(call):
        try:
            if call.data.startswith(('employer_project_prev_' , 'employer_project_next_')):
                _ , _ , _ , job_id , index = call.data.split('_')
                employer_id = call.message.chat.id
                all_job = db.get.job_ids_employer(employer_id)
                
                if not all_job:
                    bot.answer_callback_query(call.id , '–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π')
                
                new_job_id = all_job[int(index)]
                
                support.employer.show_job(
                    bot , 
                    employer_id , 
                    new_job_id , 
                    index , 
                    call.message.message_id
                )
                
            else:
                if call.data == 'employer_project_boundary_first':
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏—è", show_alert=True)
                else:
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏—è", show_alert=True)
        except Exception as e:
            logger.error(f'Error in navigation_employer_job: {e}')


    @bot.callback_query_handler(func=lambda call: call.data.startswith('candidates_'))
    @employer_only(bot , lambda msg: msg)
    def candidates_employer_job(call):
        try:
            _ , job_id = call.data.split('_')
            
            app_ids = db.get.application_by_job(job_id)
            
            if not app_ids:
                bot.answer_callback_query(call.id , "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é" , show_alert=True)
                return
            
            support.employer.show_aplication(bot , call.message.chat.id , job_id , app_ids[0] , 0 , call.message.message_id)
            
        except Exception as e:
            logger.error(f'Error in cadidstes_employer_job: {e}')
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith(('employer_application_prev_' , 'employer_application_boundary_first' , 'employer_applocation_next_' , 'employer_application_boundary_last')))
    @employer_only(bot , lambda msg: msg)
    def navigation_application(call):
        try:
            if call.data.startswith(('employer_application_prev_' , 'employer_applocation_next_')):
                _ , _ , _ , app_id , index , job_id= call.data.split('_')
                index , job_id , app_id = int(index) , int(job_id) , int(app_id)
                employer_id = call.message.chat.id
                all_app = db.get.application_by_job(job_id)
                
                if not all_app:
                    bot.answer_callback_query(call.id , '–£ –≤–∞—Å –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π')
                    return
                
                support.employer.show_aplication(
                    bot , 
                    employer_id , 
                    job_id , 
                    app_id , 
                    index , 
                    call.message.message_id
                    
                )
                
            else:
                if call.data == 'employer_application_boundary_first':
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –æ—Ç–∫–ª–∏–∫", show_alert=True)
                else:
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –æ—Ç–∫–ª–∏–∫", show_alert=True)
        except Exception as e:
            logger.error(f'Error in navigation_application: {e}' , exc_info=True)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('employer_applocation_approv_'))
    @employer_only(bot , lambda msg: msg)
    def application_approv(call):
        try:
            app_id = call.data.split("_")[3]
            result = db.updata.approv_application(app_id)
            
            if result:
                bot.answer_callback_query(call.id , "–û—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç—å" , show_alert=True)
                
                app = db.get.application_details(app_id)
                job = db.get.job_details(app['job_id'])
                
                db.updata.retention(job['employer_id'] , job['price'])
                
                now = datetime.now().strftime("%d.%m.%Y %H:%M")
                message = str(
                    f'====== –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç ======\n'
                    f'–í–∞–∫–∞–Ω—Å–∏—è: {job['title']}\n'
                    f'–ö–æ–º–ø–∞–Ω–∏—è: {job['employer_name']}\n'
                    f'–í—Ä–µ–º—è: {now}\n'
                    '============================'
                )
                bot.send_message(app['user_id'] , message)
                
                logger.info(f'application approved: {app_id}')
        
        except Exception as e:
            logger.error(f'Error in application_approv: {e}')

    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('employer_applocation_disapprov_'))
    @employer_only(bot , lambda msg: msg)
    def application_disapprov(call):
        try:
            app_id = call.data.split("_")[3]
            result = db.updata.disapprov_application(app_id)
            
            if result:
                bot.answer_callback_query(call.id , "–û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–∞–Ω—ë–Ω" , show_alert=True)
                
                app = db.get.application_details(app_id)
                job = db.get.job_details(app['job_id'])
                
                now = datetime.now().strftime("%d.%m.%Y %H:%M")
                message = str(
                    f'====== –æ—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω ======\n'
                    f'–í–∞–∫–∞–Ω—Å–∏—è: {job['title']}\n'
                    f'–ö–æ–º–ø–∞–Ω–∏—è: {job['employer_name']}\n'
                    f'–í—Ä–µ–º—è: {now}\n'
                    '============================'
                )
                bot.send_message(app['user_id'] , message)
                
                logger.info(f'application approved: {app_id}')
        
        except Exception as e:
            logger.error(f'Error in application_approv: {e}')
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
    @employer_only(bot , lambda msg: msg)
    def application_confirm(call):
        try:
            employer_id = int(call.message.chat.id)
            app_ids = db.get.app_ids_finish(int(call.data.split('_')[1]))
            
            if not app_ids:
                bot.send_message(employer_id , '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É')
                return
            
            support.employer.show_finished(bot , employer_id , int(call.data.split('_')[1]) , app_ids , 0 , call.message.message_id)
        
        except Exception as e:
            logger.error(f'Error in application_confirm: {e}' , exc_info=True)
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('finished_'))
    @employer_only(bot , lambda msg: msg)
    def application_confirm1(call):
        try:
            _ , app_id , index , job_id , score = call.data.split('_')
            index , app_id , score = int(index) , int(app_id) , int(score)
            student_id = db.get.application_info(app_id , 'student_id')
            app_ids = db.get.app_ids_finish(job_id)
            amount = db.get.job_info(job_id , 'price')
            
            result1 = db.updata.user_rating(student_id , score)
            result2 = db.updata.job_confirm(app_id , (index+1 == len(app_ids)))
            
            if result1 and result2:
                bot.answer_callback_query(call.id , '–û—Ü–µ–Ω–∫–∞ –æ—Å–∞–≤–ª–µ–Ω–∞')
                
                db.updata.transfer(student_id , amount)
                
                support.employer.show_finished(bot , int(call.message.chat.id) , job_id , app_ids , 0 , call.message.message_id)
                
        except Exception as e:
            logger.error(f'Error in apllication_confirm1: {e}' , exc_info=True)
            
    
    @bot.message_handler(func=lambda m: m.text == "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    @employer_only(bot , lambda msg: msg)
    def my_staff(msg):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('‚ûï–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' , 'üôã‚Äç‚ôÇÔ∏è—Ç–µ–∫—É—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
        bot.send_message(msg.chat.id , '–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?' , reply_markup=markup)
     
    
    
    @bot.message_handler(func=lambda m: m.text == "üôã‚Äç‚ôÇÔ∏è—Ç–µ–∫—É—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    @employer_only(bot , lambda msg: msg)
    def my_staff(msg):
        all_staff = db.get.my_staff(msg.chat.id)
        
        if not all_staff:
            bot.send_message(msg.chat.id , '—É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
        
        else:
            support.employer.my_staff(bot , msg.chat.id , 0 , msg.message_id)
    
    
    
    @bot.message_handler(func=lambda m: m.text == "‚ûï–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    @employer_only(bot , lambda msg: msg)
    def add_staff(msg):
        all_staff = db.get.add_staff(msg.chat.id)
        
        if not all_staff:
            bot.send_message(msg.chat.id , '–ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
        
        else:
            support.employer.add_staff(bot , msg.chat.id , 0 , msg.message_id)
    
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith(('employer_addstaff_prev_' , 'employer_addstaff_boundary_first' , 'employer_addstaff_next_' , 'employer_addstaff_boundary_last')))
    @employer_only(bot , lambda msg: msg)
    def navigation_add_staff(call):
        try:
            if call.data.startswith(('employer_addstaff_prev_' , 'employer_addstaff_next_')):
                _ , _ , _ , staff_id , index , employer_id= call.data.split('_')
                all_staff = db.get.add_staff(employer_id)
                
                if not all_staff:
                    bot.answer_callback_query(call.id , '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–±–∞–ª–≤–Ω–∏–µ')
                    return
                
                new_staff_id = all_staff[index]
                
                support.employer.add_staff(bot , employer_id , index , call.message.message_id)
                
            else:
                if call.data == 'employer_addstaff_boundary_first':
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∞—è –∑–∞—è–≤–∫–∞", show_alert=True)
                else:
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∞—è –∑–∞—è–≤–∫–∞", show_alert=True)
        except Exception as e:
            logger.error(f'Error in navigation_add_staff: {e}')
    
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith(('employer_mystaff_prev_' , 'employer_mystaff_boundary_first' , 'employer_mystaff_next_' , 'employer_mystaff_boundary_last')))
    @employer_only(bot , lambda msg: msg)
    def navigation_my_staff(call):
        try:
            if call.data.startswith(('employer_mystaff_prev_' , 'employer_mystaff_next_')):
                _ , _ , _ , staff_id , index , employer_id= call.data.split('_')
                all_staff = db.get.my_staff(employer_id)
                
                if not all_staff:
                    bot.answer_callback_query(call.id , '—É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
                    return
                
                new_staff_id = all_staff[index]
                
                support.employer.add_staff(bot , employer_id , index , call.message.message_id)
                
            else:
                if call.data == 'employer_addstaff_boundary_first':
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", show_alert=True)
                else:
                    bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", show_alert=True)
        except Exception as e:
            logger.error(f'Error in navigation_my_staff: {e}')


    @bot.callback_query_handler(func=lambda call: call.data.startswith('employer_mystaff_remove_'))
    @employer_only(bot , lambda msg: msg)
    def remove_staff(call):
        try:
            staff_id = call.data.split('_')[3]
            db.updata.remove_staff(staff_id)
            bot.answer_callback_query(call.id , '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–æ–ª–∏–Ω' , show_alert=True)
            logger.info(f'User: {staff_id} remove')
            
        except Exception as e:
            logger.error(f'Error in remove_staff: {e}')
    


    @bot.callback_query_handler(func=lambda call: call.data.startswith('employer_addstaff_approv_'))
    @employer_only(bot , lambda msg: msg)
    def approv_add_staff(call):
        try:
            staff_id = call.data.split('_')[3]
            db.updata.adding_staff(staff_id)
            bot.answer_callback_query(call.id , '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç—å' , show_alert=True)
            logger.info(f'User: {staff_id} accept')
            
        except Exception as e:
            logger.error(f'Error in approved_add_staff: {e}')
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('employer_addstaff_disapprov_'))
    @employer_only(bot , lambda msg: msg)
    def approv_add_staff(call):
        try:
            staff_id = call.data.split('_')[3]
            db.updata.not_adding_staff(staff_id)
            bot.answer_callback_query(call.id , '–ó–∞—è–≤–∫–∞ –æ—Ç–ª–æ–Ω–µ–Ω–∞' , show_alert=True)
            logger.info(f'User: {staff_id} does not accept')
            
        except Exception as e:
            logger.error(f'Error in approved_add_staff: {e}')
            
    
    
    @bot.message_handler(func=lambda m: m.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    @employer_only(bot , lambda msg: msg)
    def start_topup(msg):
            bot.send_message(msg.chat.id , '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(msg , get_amount)
    
    
    def get_amount(msg):
        try:
            amount = round(float(msg.text) * (1 + commission_rate), 2)
            bot.delete_state(msg.chat.id , msg.chat.id)
            bot.set_state(msg.from_user.id , 'process_create' , msg.chat.id)
            bot.add_data(msg.from_user.id , msg.chat.id , amount = amount)
            bot.add_data(msg.from_user.id , msg.chat.id , amount1 = float(msg.text))
            
            
            bot.send_message(
                msg.chat.id,
                f"üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
                f"–° —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ (5%) –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ *{amount} ‚ÇΩ* –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—á—ë—Ç:\n\n"
                f"üìå *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
                f"`1234 5678 9012 3456`\n\n"
                f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *PDF-—Ñ–∞–π–ª —Å —á–µ–∫–æ–º* –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
            )
            bot.register_next_step_handler(msg, get_receipt)
            
        except ValueError:
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            bot.register_next_step_handler(msg, get_amount)
    
    
    def get_receipt(msg):
        if not msg.document or not msg.document.file_name.endswith('.pdf'):
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ PDF-—Ñ–∞–π–ª.")
            bot.register_next_step_handler(msg, get_receipt)
            return

        user_id = msg.from_user.id
        name = db.get.user_info(user_id , 'name')
        username = db.get.user_info(user_id , 'user_name')

        with bot.retrieve_data(msg.from_user.id , msg.chat.id) as data:
            if not data:
                bot.send_message(msg.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                return

            amount = data['amount']
            amount1 = data['amount1']
            

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç
        caption = (
            f"üì• –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (@{username})\n"
            f"üÜî ID: {user_id}\n"
            f"üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è c —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å–∏–∏: {amount} ‚ÇΩ\n"
            f"üìÇ –ß–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω –Ω–∏–∂–µ\n"
        )

        markup = types.InlineKeyboardMarkup()
        approv_btn = types.InlineKeyboardButton('‚úÖ–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' , callback_data=f'aproved_topup_{msg.chat.id}_{amount1}')
        disapprov_btn = types.InlineKeyboardButton('‚ùå–æ—Ç–∫–ª–æ–Ω–∏—Ç—å' , callback_data=f'disaproved_topup_{msg.chat.id}_{amount1}')
        markup.row(approv_btn , disapprov_btn)
        
        file_id = msg.document.file_id
        bot.send_document(chat_id=chat_mod, document=file_id, caption=caption)
        bot.send_message(chat_id=chat_mod, text="–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞—è–≤–∫–æ–π?", reply_markup=markup)

        bot.send_message(msg.chat.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        logger.info(f'request for replenishment from: {msg.chat.id}')
    
    
    @bot.message_handler(func=lambda m: m.text == "üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    def start_support(msg):
        bot.send_message(msg.chat.id, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        bot.register_next_step_handler(msg, handle_support_request)


    def handle_support_request(msg):
        user_id = msg.from_user.id
        name = db.get.user_info(user_id, 'name')
        username = db.get.user_info(user_id, 'user_name')
        text = msg.text

        # ID –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        ticket_id = f"{user_id}-{int(datetime.now().timestamp())}"


        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        message = (
            f"üÜò *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É*\n"
            f"üÜî Ticket ID: `{ticket_id}`\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (@{username})\n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n"
        )

        markup = types.InlineKeyboardMarkup()
        in_progress_btn = types.InlineKeyboardButton("üõ† –í —Ä–∞–±–æ—Ç—É", callback_data=f"support_progress_{ticket_id}")
        markup.add(in_progress_btn)

        bot.send_message(chat_id=chat_mod, text=message , reply_markup=markup)

        bot.send_message(msg.chat.id, "üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        logger.info(f'request for request from: {msg.chat.id}')

        