from telebot import types
from telebot import TeleBot
import random
import string

from . import student , admin , employer , mod , staff 
import logging
import data_base as db
import keyboards

logger = logging.getLogger(__name__)


def generate_secret_code(length=5):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ (A-Z, a-z)"""
    characters = string.ascii_letters  # –í—Å–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (A-Za-z)
    return ''.join(random.choice(characters) for _ in range(length))

def home(bot , user_id):
    role = db.get.user_info(user_id , 'role')

    if role == 'student':
        student.student_home_page(bot , user_id)

    if role == 'employer':
        employer.emplouer_home_page(bot , user_id)
    
    if role == 'staff':
        staff.staff_home_page(bot , user_id)


def register_general(bot: TeleBot):
    
    @bot.message_handler(commands=['start'])
    def handle_start(msg):
        try:
            if not db.user_exists(msg.from_user.id):
                bot.delete_state(msg.from_user.id, msg.chat.id)
                bot.set_state(msg.from_user.id, "add_user", msg.chat.id)

                message = str(
                    '<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>RobSpec</u>!</b>\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É <b>—Ä–æ–ª—å</b> –≤ —Å–∏—Å—Ç–µ–º–µ:\n'  
                    '‚ñ´Ô∏è <b>–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> ‚Äî –∏—â–µ—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É  \n'
                    '‚ñ´Ô∏è <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</b> ‚Äî –ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏\n'  
                    '‚ñ´Ô∏è <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b> ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é\n\n'
                    '<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</b>'
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message  , 
                    reply_markup=keyboards.general.role_keyboard() , 
                    parse_mode='HTML'
                    )
                
                logger.info(f'user: {msg.chat.id} started register')
                bot.register_next_step_handler(msg , process_select_name)
            
            else:
                role = db.get.user_info(msg.from_user.id , 'role')

                if role == 'student':
                    student.student_home_page(bot , msg.from_user.id)

                if role == 'employer':
                    employer.emplouer_home_page(bot , msg.from_user.id)
                
                if role == 'staff':
                    staff.staff_home_page(bot , msg.from_user.id)


        
        except Exception as e:
            logger.error(f'Error in handle_start: {e}')
    

    def process_select_name(msg):
        try:
            if not(msg.text in ("üì¢ –ó–∞–∫–∞–∑—á–∏–∫" , "üßë‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" , "üè¢—Å–æ—Ç—Ä—É–¥–Ω–∏–∫")):
                message = str(
                    "<b>‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:</b>\n\n"
                    "üëá –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n"
                    "‚ñ™Ô∏è <b>üíº –ó–∞–∫–∞–∑—á–∏–∫</b> ‚Äî —Ö–æ—á—É —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
                    "‚ñ™Ô∏è <b>üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> ‚Äî –∏—â—É –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode="HTML"
                    )
                bot.register_next_step_handler(msg , process_select_name)

            else:
                if msg.text == 'üì¢ –ó–∞–∫–∞–∑—á–∏–∫':
                    bot.add_data(msg.from_user.id , msg.chat.id , role = 'employer')
                    message = str(
                        '<b>üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ò–ü</b>\n\n'
                        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'  
                        '<code>–ò–ü –°–º–∏—Ä–Ω–æ–≤</code> –∏–ª–∏ <code>–û–û–û "–†–æ–±–°–∫–µ–ø"</code>\n\n'
                        '–û–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤–∞–∫–∞–Ω—Å–∏–π.\n\n'
                        '–¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancle'
                    )

                elif msg.text == 'üßë‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å':
                    bot.add_data(msg.from_user.id , msg.chat.id , role = 'student')
                    message = str(
                        '<b>‚úçÔ∏è –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–æ—â–∞—Ç—å—Å—è</b>\n\n'
                        '–í–≤–µ–¥–∏—Ç–µ <u>–ø–æ–ª–Ω–æ–µ –∏–º—è</u> –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' 
                        '<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>\n\n'
                        '–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n'
                        '–¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancle'
                    )

                elif msg.text == 'üè¢—Å–æ—Ç—Ä—É–¥–Ω–∏–∫':
                    bot.add_data(msg.from_user.id , msg.chat.id , role = 'staff')
                    message = str(
                        '<b>‚úçÔ∏è –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–æ—â–∞—Ç—å—Å—è</b>\n\n'
                        '–í–≤–µ–¥–∏—Ç–µ <u>–ø–æ–ª–Ω–æ–µ –∏–º—è</u> –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' 
                        '<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</code>\n\n'
                        '–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n'
                        '–¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancle'
                    )
                
                bot.send_message(msg.chat.id , message , parse_mode='HTML' , reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(msg , process_register_finish)


        except Exception as e:
            logger.error(f'Error in process_select_name: {e}')


    def process_register_finish(msg):
        try:
            if msg.text == '/cancle':
                message = str(
                    "<b>‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:</b>\n\n"
                    "üëá –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n"
                    "‚ñ™Ô∏è <b>üíº –ó–∞–∫–∞–∑—á–∏–∫</b> ‚Äî —Ö–æ—á—É —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
                    "‚ñ™Ô∏è <b>üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> ‚Äî –∏—â—É –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode="HTML"
                    )
                return bot.register_next_step_handler(msg , process_select_name)
                
            with bot.retrieve_data(msg.from_user.id , msg.chat.id) as data:
                if data['role'] == 'employer':
                    new_code = ''
                    while db.check.is_secret_code_exists(new_code) or new_code == '':
                        new_code = generate_secret_code()
                        
                    db.add.user(
                    msg.from_user.id , 
                    msg.from_user.username , 
                    msg.text , 
                    data['role'] , 
                    secret_code = new_code
                    )

                else:
                    db.add.user(
                        msg.from_user.id , 
                        msg.from_user.username , 
                        msg.text , 
                        data['role'] , 
                    )
            
            home(bot , msg.from_user.id)
        
        except Exception as e:
            logger.error(f'Error in process_register_finish: {e}')